package com.fanfull.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fanfull.db.Finger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FINGER.
*/
public class FingerDao extends AbstractDao<Finger, Long> {

    public static final String TABLENAME = "FINGER";

    /**
     * Properties of entity Finger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Finger_id = new Property(1, int.class, "finger_id", false, "FINGER_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Finger_version = new Property(3, int.class, "finger_version", false, "FINGER_VERSION");
        public final static Property Finger_sno = new Property(4, int.class, "finger_sno", false, "FINGER_SNO");
    };


    public FingerDao(DaoConfig config) {
        super(config);
    }
    
    public FingerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FINGER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FINGER_ID' INTEGER NOT NULL ," + // 1: finger_id
                "'USER_ID' TEXT NOT NULL ," + // 2: user_id
                "'FINGER_VERSION' INTEGER NOT NULL ," + // 3: finger_version
                "'FINGER_SNO' INTEGER NOT NULL );"); // 4: finger_sno
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FINGER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Finger entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFinger_id());
        stmt.bindString(3, entity.getUser_id());
        stmt.bindLong(4, entity.getFinger_version());
        stmt.bindLong(5, entity.getFinger_sno());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Finger readEntity(Cursor cursor, int offset) {
        Finger entity = new Finger( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // finger_id
            cursor.getString(offset + 2), // user_id
            cursor.getInt(offset + 3), // finger_version
            cursor.getInt(offset + 4) // finger_sno
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Finger entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFinger_id(cursor.getInt(offset + 1));
        entity.setUser_id(cursor.getString(offset + 2));
        entity.setFinger_version(cursor.getInt(offset + 3));
        entity.setFinger_sno(cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Finger entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Finger entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
