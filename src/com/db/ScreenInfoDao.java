package com.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.entity.ScreenInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCREEN_INFO".
*/
public class ScreenInfoDao extends AbstractDao<ScreenInfo, String> {

    public static final String TABLENAME = "SCREEN_INFO";

    /**
     * Properties of entity ScreenInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ScreenID = new Property(0, String.class, "screenID", true, "SCREEN_ID");
        public final static Property IsUse = new Property(1, boolean.class, "isUse", false, "IS_USE");
        public final static Property IsInit = new Property(2, boolean.class, "isInit", false, "IS_INIT");
        public final static Property PileID = new Property(3, String.class, "pileID", false, "PILE_ID");
        public final static Property SerialNum = new Property(4, String.class, "serialNum", false, "SERIAL_NUM");
        public final static Property Refresh_flag = new Property(5, int.class, "refresh_flag", false, "REFRESH_FLAG");
        public final static Property Update_time = new Property(6, String.class, "update_time", false, "UPDATE_TIME");
    }


    public ScreenInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ScreenInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCREEN_INFO\" (" + //
                "\"SCREEN_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: screenID
                "\"IS_USE\" INTEGER NOT NULL ," + // 1: isUse
                "\"IS_INIT\" INTEGER NOT NULL ," + // 2: isInit
                "\"PILE_ID\" TEXT," + // 3: pileID
                "\"SERIAL_NUM\" TEXT," + // 4: serialNum
                "\"REFRESH_FLAG\" INTEGER NOT NULL ," + // 5: refresh_flag
                "\"UPDATE_TIME\" TEXT);"); // 6: update_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCREEN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScreenInfo entity) {
        stmt.clearBindings();
 
        String screenID = entity.getScreenID();
        if (screenID != null) {
            stmt.bindString(1, screenID);
        }
        stmt.bindLong(2, entity.getIsUse() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsInit() ? 1L: 0L);
 
        String pileID = entity.getPileID();
        if (pileID != null) {
            stmt.bindString(4, pileID);
        }
 
        String serialNum = entity.getSerialNum();
        if (serialNum != null) {
            stmt.bindString(5, serialNum);
        }
        stmt.bindLong(6, entity.getRefresh_flag());
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(7, update_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScreenInfo entity) {
        stmt.clearBindings();
 
        String screenID = entity.getScreenID();
        if (screenID != null) {
            stmt.bindString(1, screenID);
        }
        stmt.bindLong(2, entity.getIsUse() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsInit() ? 1L: 0L);
 
        String pileID = entity.getPileID();
        if (pileID != null) {
            stmt.bindString(4, pileID);
        }
 
        String serialNum = entity.getSerialNum();
        if (serialNum != null) {
            stmt.bindString(5, serialNum);
        }
        stmt.bindLong(6, entity.getRefresh_flag());
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(7, update_time);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ScreenInfo readEntity(Cursor cursor, int offset) {
        ScreenInfo entity = new ScreenInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // screenID
            cursor.getShort(offset + 1) != 0, // isUse
            cursor.getShort(offset + 2) != 0, // isInit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pileID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serialNum
            cursor.getInt(offset + 5), // refresh_flag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // update_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScreenInfo entity, int offset) {
        entity.setScreenID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsUse(cursor.getShort(offset + 1) != 0);
        entity.setIsInit(cursor.getShort(offset + 2) != 0);
        entity.setPileID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSerialNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRefresh_flag(cursor.getInt(offset + 5));
        entity.setUpdate_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ScreenInfo entity, long rowId) {
        return entity.getScreenID();
    }
    
    @Override
    public String getKey(ScreenInfo entity) {
        if(entity != null) {
            return entity.getScreenID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScreenInfo entity) {
        return entity.getScreenID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
