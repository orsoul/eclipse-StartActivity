package com.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.entity.TrayInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAY_INFO".
*/
public class TrayInfoDao extends AbstractDao<TrayInfo, String> {

    public static final String TABLENAME = "TRAY_INFO";

    /**
     * Properties of entity TrayInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TrayID = new Property(0, String.class, "trayID", true, "TRAY_ID");
        public final static Property TotalAmount = new Property(1, String.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property BagType = new Property(2, String.class, "bagType", false, "BAG_TYPE");
        public final static Property MoneyType = new Property(3, String.class, "moneyType", false, "MONEY_TYPE");
        public final static Property MoneyModel = new Property(4, String.class, "moneyModel", false, "MONEY_MODEL");
        public final static Property BagNum = new Property(5, int.class, "bagNum", false, "BAG_NUM");
        public final static Property Update_time = new Property(6, String.class, "update_time", false, "UPDATE_TIME");
    }


    public TrayInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TrayInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAY_INFO\" (" + //
                "\"TRAY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: trayID
                "\"TOTAL_AMOUNT\" TEXT," + // 1: totalAmount
                "\"BAG_TYPE\" TEXT," + // 2: bagType
                "\"MONEY_TYPE\" TEXT," + // 3: moneyType
                "\"MONEY_MODEL\" TEXT," + // 4: moneyModel
                "\"BAG_NUM\" INTEGER NOT NULL ," + // 5: bagNum
                "\"UPDATE_TIME\" TEXT);"); // 6: update_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrayInfo entity) {
        stmt.clearBindings();
 
        String trayID = entity.getTrayID();
        if (trayID != null) {
            stmt.bindString(1, trayID);
        }
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(2, totalAmount);
        }
 
        String bagType = entity.getBagType();
        if (bagType != null) {
            stmt.bindString(3, bagType);
        }
 
        String moneyType = entity.getMoneyType();
        if (moneyType != null) {
            stmt.bindString(4, moneyType);
        }
 
        String moneyModel = entity.getMoneyModel();
        if (moneyModel != null) {
            stmt.bindString(5, moneyModel);
        }
        stmt.bindLong(6, entity.getBagNum());
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(7, update_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrayInfo entity) {
        stmt.clearBindings();
 
        String trayID = entity.getTrayID();
        if (trayID != null) {
            stmt.bindString(1, trayID);
        }
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(2, totalAmount);
        }
 
        String bagType = entity.getBagType();
        if (bagType != null) {
            stmt.bindString(3, bagType);
        }
 
        String moneyType = entity.getMoneyType();
        if (moneyType != null) {
            stmt.bindString(4, moneyType);
        }
 
        String moneyModel = entity.getMoneyModel();
        if (moneyModel != null) {
            stmt.bindString(5, moneyModel);
        }
        stmt.bindLong(6, entity.getBagNum());
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(7, update_time);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TrayInfo readEntity(Cursor cursor, int offset) {
        TrayInfo entity = new TrayInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // trayID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // totalAmount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bagType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // moneyType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // moneyModel
            cursor.getInt(offset + 5), // bagNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // update_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrayInfo entity, int offset) {
        entity.setTrayID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTotalAmount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBagType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoneyType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMoneyModel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBagNum(cursor.getInt(offset + 5));
        entity.setUpdate_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TrayInfo entity, long rowId) {
        return entity.getTrayID();
    }
    
    @Override
    public String getKey(TrayInfo entity) {
        if(entity != null) {
            return entity.getTrayID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrayInfo entity) {
        return entity.getTrayID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
